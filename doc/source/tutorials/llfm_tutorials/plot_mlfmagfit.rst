.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_tutorials_llfm_tutorials_plot_mlfmagfit.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_llfm_tutorials_plot_mlfmagfit.py:


.. _tutorials-mlfm-fit:

MLFM-AG Model Fitting
=====================

.. currentmodule:: pydygp.linlatentforcemodels

This note decribes how to carry out the porcess of carrying out MAP parameter
estimation for the MLFM model using the Adaptive Gradient matching approximation
:class:`MLFMAdapGrad` 



.. code-block:: python

    import numpy as np
    import matplotlib.pyplot as plt
    from pydygp.linlatentforcemodels import MLFMAdapGrad







Model Setup
~~~~~~~~~~~
We are going to demonstrate using the example we have already described in
:ref:`tutorials-mlfm-sim` and the steps described there for setting up
this model and simulating some data. The model was a simple ODE on the unit
circle

.. math::

   S^1 = \{ x \in \mathbb{R}^2 \; : \; \| x \| = 1 \},

We can write a linear ode on :math:`S^1` as

.. math::

   \begin{bmatrix} \dot{x}(t) \\ \dot{y}(t) \end{bmatrix}
   = \begin{bmatrix} 0 & -1 \\ 1 & 0 \end{bmatrix}
     \begin{bmatrix} x(t) \\ y(t) \end{bmatrix}.

We can set up this model by and simulate some observations by




.. code-block:: python

    import pydygp.liealgebras

    np.random.seed(7)  # seed for reproducability

    so2 = pydygp.liealgebras.so(2)  # import the Lie algebra
    mlfm = MLFMAdapGrad(so2, R=1)   # Build the model with 0 offset matrix

    tt = np.linspace(0., 5., 11)    # time data points
    Y, gtrue = mlfm.sim([1., 0], tt)    # Simulation result




.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/danieltait/Desktop/pydygp/tutorials/llfm_tutorials/plot_mlfmagfit.py", line 48, in <module>
        Y, gtrue = mlfm.sim([1., 0], tt)    # Simulation result
      File "/Users/danieltait/Desktop/pydygp/pydygp/linlatentforcemodels/mlfm.py", line 132, in sim
        raise ValueError("Must supply beta.")
    ValueError: Must supply beta.




Model Fit
~~~~~~~~~
The API is designed to be as simple as possible and so for simple enough
models we should get reasonable results by simply calling



.. code-block:: python


    res0 = mlfm.fit(tt, Y)

this returns a simple :class:`namedtuple` object which has attributes with
names corresponding to the parameters described in
:ref:`tutorials-index-mlfmag-par`. We can compare the point estimates with
the true latent force functions



.. code-block:: python

    ttdense = np.linspace(tt[0], tt[-1], 21)  # make a set of dense times
    fig0, ax = plt.subplots()
    ax.plot(ttdense, gtrue[0](ttdense), 'k-', alpha=0.5)
    ax.plot(tt, res0.g.T, '+')


Sample Density Dependenance
~~~~~~~~~~~~~~~~~~~~~~~~~~~
The adaptive gradient matching processes depend on the use of GP
interpolators of the unknown state trajectories, and therefore
we might expect the accuracy of these methods to decrease not with the
sample size but with the space between samples.

Dense Predictions
~~~~~~~~~~~~~~~~~



.. code-block:: python

    mlfm2 = MLFMAdapGrad(so2, R=1)
    data_inds = np.linspace(0, ttdense.size-1, tt.size, dtype=np.intp)
    mlfm2._setup_times(tt, tt_aug=ttdense, data_inds=data_inds)
    res_dense = mlfm2.fit(tt, Y, logpsi_is_fixed=True)

    fig, ax = plt.subplots()
    ss = np.linspace(tt[0], tt[-1])
    ax.plot(ss, gtrue[0](ss), 'k-', alpha=0.2)
    ax.plot(mlfm.ttc, res0.g.T, '+')
    ax.plot(mlfm2.ttc, res_dense.g.T, 'o')

    plt.show()

**Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_tutorials_llfm_tutorials_plot_mlfmagfit.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_mlfmagfit.py <plot_mlfmagfit.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_mlfmagfit.ipynb <plot_mlfmagfit.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
